name: PartsUnlimited.Web

on:
  workflow_dispatch:
  push:
    branches: [ master ]

env:
  SLN_FILE: PartsUnlimited.sln
 # WEBAPP_NAME: partsdemo
  PACKAGE_TEMP_PATH: Content\D_C\a\PartsUnlimited\PartsUnlimited\src\PartsUnlimitedWebsite\obj\Release\Package\PackageTmp

jobs:
  BuildTest:
    runs-on: windows-latest
    name: ‚õèÔ∏è Build and Unit Test
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
   
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
      
    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1
      
    - name: NuGet restore
      run: nuget restore
        
    - name: Build App
      run: |
       # msbuild ${{env.SLN_FILE}} /p:TransformWebConfigEnabled=False /p:AutoParameterizationWebConfigConnectionStrings=False /p:Configuration=Release /p:Platform='Any CPU' /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true 
         msbuild ${{env.SLN_FILE}} /p:TransformWebConfigEnabled=False /p:AutoParameterizationWebConfigConnectionStrings=False /p:Configuration=Release /p:Platform='Any CPU' /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="${{github.workspace}}\stagingdir"

    - name: Run Unit Test
      run: vstest.console.exe /Platform:x64 PartsUnlimited.UnitTests.dll
      working-directory: ${{github.workspace}}\test\PartsUnlimited.UnitTests\bin\Release
    
    - name: Copy Selenium Tests
      shell: pwsh
      #working-directory: ${{github.workspace}}/stagingdir
      run: |
       new-item -Path ${{github.workspace}}\stagingdir -Name "TestAssemblies" -ItemType "directory"
       copy-item -Path ${{github.workspace}}\test\PartsUnlimited.SeleniumTests\bin\Release\* -Destination .\TestAssemblies -Recurse
    
    - name: Publish Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: partsunlimited
        path: ${{github.workspace}}\stagingdir

  CodeQL:
      name: ‚≠ïÔ∏è Security Scanning  
      runs-on: ubuntu-latest
      permissions:
       actions: read
       contents: read
       security-events: write
       
      needs: BuildTest
      strategy:
       fail-fast: false
       matrix:
        language: [ 'csharp', 'javascript' ]
        
      steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  Sonar-Analysis:
    name: üîÜ Sonar Analysis
    runs-on: windows-latest
    needs: [ BuildTest ]
    
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
      
      - name: NuGet restore
        run: nuget restore
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"CanarysPlayground_PartsUnlimited" /o:"canarysplayground" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          msbuild ${{env.SLN_FILE}} /p:TransformWebConfigEnabled=False /p:AutoParameterizationWebConfigConnectionStrings=False /p:Configuration=Release /p:Platform='Any CPU' /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  Lint:
    name: üëÄ Lint Code Base
    runs-on: ubuntu-latest
    needs: BuildTest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v3
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
